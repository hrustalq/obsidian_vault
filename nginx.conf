events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Gzip compression
    gzip on;
    gzip_types text/plain application/json;
    
    # Upstream CouchDB
    upstream couchdb {
        server couchdb-obsidian-livesync:5984;
    }
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name ${COUCHDB_DOMAIN:-couchdb.yourdomain.com};
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name ${COUCHDB_DOMAIN:-couchdb.yourdomain.com};
        
        # SSL configuration (if using custom certificates)
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # If using Cloudflare, SSL termination happens at Cloudflare
        # so this container can just proxy HTTP
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        
        # Proxy to CouchDB
        location / {
            proxy_pass http://couchdb;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # CouchDB specific settings
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Handle WebSocket connections for real-time sync
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Increase timeouts for large database operations
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Health check endpoint
        location /_health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}