name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Validate Docker Compose file
      env:
        PUID: 1000
        PGID: 1000
        UMASK: 0022
        TZ: UTC
        COUCHDB_USER: test_user
        COUCHDB_PASSWORD: test_password
      run: docker compose config
      
    - name: Pull Docker images
      run: docker compose pull
      
    - name: Test Docker Compose setup
      env:
        PUID: 1000
        PGID: 1000
        UMASK: 0022
        TZ: UTC
        COUCHDB_USER: test_user
        COUCHDB_PASSWORD: test_password
      run: |
        docker compose up -d
        sleep 30
        curl -f http://localhost:5984 || exit 1
        docker compose logs
        
    - name: Cleanup
      if: always()
      run: docker compose down -v

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && secrets.SSH_HOST != '' && secrets.COUCHDB_PASSWORD != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Remote Server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        envs: PUID,PGID,UMASK,TZ,COUCHDB_USER,COUCHDB_PASSWORD
        script: |
          # Check if required secrets are set
          if [ -z "${{ secrets.SSH_HOST }}" ] || [ -z "${{ secrets.SSH_USERNAME }}" ] || [ -z "${{ secrets.SSH_KEY }}" ]; then
            echo "‚ö†Ô∏è SSH secrets not configured - skipping deployment"
            echo "Please set SSH_HOST, SSH_USERNAME, and SSH_KEY secrets"
            exit 0
          fi
          
          if [ -z "${{ secrets.COUCHDB_PASSWORD }}" ]; then
            echo "‚ö†Ô∏è COUCHDB_PASSWORD secret not set - skipping deployment"
            exit 0
          fi
          
          if [ -z "${{ secrets.DEPLOY_PATH }}" ]; then
            echo "‚ö†Ô∏è DEPLOY_PATH secret not set - skipping deployment"
            exit 0
          fi
          
          echo "üöÄ Deploying Obsidian CouchDB to server..."
          
          # Navigate to deployment directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Pull latest changes
          git pull origin main
          
          # Export environment variables
          export PUID="${{ secrets.PUID || '99' }}"
          export PGID="${{ secrets.PGID || '100' }}"
          export UMASK="${{ secrets.UMASK || '0022' }}"
          export TZ="${{ secrets.TZ || 'Asia/Shanghai' }}"
          export COUCHDB_USER="${{ secrets.COUCHDB_USER || 'obsidian_user' }}"
          export COUCHDB_PASSWORD="${{ secrets.COUCHDB_PASSWORD }}"
          
          # Deploy using Makefile
          make up
          
          # Wait for service to be ready
          sleep 30
          
          # Health check
          if curl -f http://localhost:5984 >/dev/null 2>&1; then
            echo "‚úÖ Deployment successful - CouchDB is responding"
          else
            echo "‚ùå Deployment failed - CouchDB is not responding"
            make logs
            exit 1
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 