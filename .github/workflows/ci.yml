name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test environment file
      run: |
        cat > .env << EOF
        PUID=1000
        PGID=1000
        UMASK=0022
        TZ=UTC
        COUCHDB_USER=test_user
        COUCHDB_PASSWORD=test_password
        COUCHDB_CORS_ORIGINS=*
        COUCHDB_DOMAIN=localhost
        EOF
        
    - name: Create required directories for CI testing
      run: |
        # Create directory structure for CI testing
        sudo mkdir -p /mnt/user/appdata/couchdb-obsidian-livesync/{data,etc/local.d,nginx/ssl,nginx/html}
        
        # Create minimal local.ini for testing
        sudo tee /mnt/user/appdata/couchdb-obsidian-livesync/etc/local.ini > /dev/null << 'EOF'
        [couchdb]
        single_node=true
        
        [httpd]
        enable_cors = true
        bind_address = 0.0.0.0
        port = 5984
        
        [cors]
        origins = *
        credentials = true
        methods = GET, PUT, POST, HEAD, DELETE
        headers = accept, authorization, content-type, origin, referer, x-csrf-token
        
        [chttpd]
        require_valid_user = false
        bind_address = 0.0.0.0
        port = 5984
        EOF
        
        # Create minimal nginx config for testing
        sudo tee /mnt/user/appdata/couchdb-obsidian-livesync/nginx/nginx.conf > /dev/null << 'EOF'
        events {
            worker_connections 1024;
        }
        http {
            upstream couchdb {
                server couchdb-obsidian-livesync:5984;
            }
            server {
                listen 80;
                location / {
                    proxy_pass http://couchdb;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
        }
        EOF
        
        # Create self-signed certificates for CI testing
        sudo openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
          -keyout /mnt/user/appdata/couchdb-obsidian-livesync/nginx/ssl/key.pem \
          -out /mnt/user/appdata/couchdb-obsidian-livesync/nginx/ssl/cert.pem \
          -subj "/C=US/ST=Test/L=Test/O=Test/CN=localhost"
        
        # Set permissions
        sudo chmod -R 755 /mnt/user/appdata/couchdb-obsidian-livesync/
        sudo chmod 644 /mnt/user/appdata/couchdb-obsidian-livesync/etc/local.ini
        sudo chmod 644 /mnt/user/appdata/couchdb-obsidian-livesync/nginx/nginx.conf
      
    - name: Validate Docker Compose file
      run: docker compose config
      
    - name: Pull Docker images
      run: docker compose pull
      
    - name: Test Docker Compose setup
      run: |
        docker compose up -d
        
        # Wait for CouchDB to be ready with timeout
        echo "‚è≥ Waiting for CouchDB to be ready..."
        timeout=60
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -f http://localhost:5984 >/dev/null 2>&1; then
            echo "‚úÖ CouchDB is ready!"
            break
          fi
          echo "Waiting... ($counter/$timeout)"
          sleep 2
          counter=$((counter + 2))
        done
        
        # Final health check
        if ! curl -f http://localhost:5984; then
          echo "‚ùå CouchDB failed to start properly"
          echo "üìã Container logs:"
          docker compose logs
          exit 1
        fi
        
        echo "üîç Testing CouchDB API endpoints..."
        curl -f http://localhost:5984/_up || echo "‚ö†Ô∏è Health endpoint not available"
        echo "‚úÖ Docker Compose test completed successfully"
        
    - name: Cleanup
      if: always()
      run: docker compose down -v

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Remote Server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        envs: PUID,PGID,UMASK,TZ,COUCHDB_USER,COUCHDB_PASSWORD
        script: |
          # Check if required secrets are set
          if [ -z "${{ secrets.SSH_HOST }}" ] || [ -z "${{ secrets.SSH_USERNAME }}" ] || [ -z "${{ secrets.SSH_KEY }}" ]; then
            echo "‚ö†Ô∏è SSH secrets not configured - skipping deployment"
            echo "Please set SSH_HOST, SSH_USERNAME, and SSH_KEY secrets"
            exit 0
          fi
          
          if [ -z "${{ secrets.COUCHDB_PASSWORD }}" ]; then
            echo "‚ö†Ô∏è COUCHDB_PASSWORD secret not set - skipping deployment"
            exit 0
          fi
          
          if [ -z "${{ secrets.DEPLOY_PATH }}" ]; then
            echo "‚ö†Ô∏è DEPLOY_PATH secret not set - skipping deployment"
            exit 0
          fi
          
          echo "üöÄ Deploying Obsidian CouchDB to server..."
          
          # Navigate to deployment directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Pull latest changes
          git pull origin main
          
          # Run setup script to create directories and config files
          echo "üìÅ Setting up directory structure and configuration..."
          chmod +x setup-directories.sh
          
          # Create SSL certificates from secrets if provided
          if [ -n "${{ secrets.SSL_CERT }}" ] && [ -n "${{ secrets.SSL_KEY }}" ]; then
            echo "üîí Installing SSL certificates from GitHub secrets..."
            mkdir -p /mnt/user/appdata/couchdb-obsidian-livesync/nginx/ssl
            echo "${{ secrets.SSL_CERT }}" > /mnt/user/appdata/couchdb-obsidian-livesync/nginx/ssl/cert.pem
            echo "${{ secrets.SSL_KEY }}" > /mnt/user/appdata/couchdb-obsidian-livesync/nginx/ssl/key.pem
            chmod 600 /mnt/user/appdata/couchdb-obsidian-livesync/nginx/ssl/*.pem
            echo "‚úÖ SSL certificates installed from secrets"
          else
            echo "üìù No SSL certificates in secrets - setup script will handle certificate creation"
          fi
          
          ./setup-directories.sh
          
          # Export environment variables
          export PUID="${{ secrets.PUID || '99' }}"
          export PGID="${{ secrets.PGID || '100' }}"
          export UMASK="${{ secrets.UMASK || '0022' }}"
          export TZ="${{ secrets.TZ || 'Asia/Shanghai' }}"
          export COUCHDB_USER="${{ secrets.COUCHDB_USER || 'obsidian_user' }}"
          export COUCHDB_PASSWORD="${{ secrets.COUCHDB_PASSWORD }}"
          export COUCHDB_CORS_ORIGINS="${{ secrets.COUCHDB_CORS_ORIGINS || '*' }}"
          export COUCHDB_DOMAIN="${{ secrets.COUCHDB_DOMAIN || 'localhost' }}"
          
          # Deploy using Makefile
          make up
          
          # Wait for service to be ready with timeout
          echo "‚è≥ Waiting for CouchDB to be ready..."
          timeout=90
          counter=0
          while [ $counter -lt $timeout ]; do
            if curl -f http://localhost:5984 >/dev/null 2>&1; then
              echo "‚úÖ CouchDB is ready!"
              break
            fi
            echo "Waiting... ($counter/$timeout)"
            sleep 3
            counter=$((counter + 3))
          done
          
          # Health check with detailed testing
          if curl -f http://localhost:5984 >/dev/null 2>&1; then
            echo "üîç Running health checks..."
            
            # Test basic connectivity
            curl -f http://localhost:5984 && echo "‚úÖ Basic connectivity OK"
            
            # Test CouchDB API
            curl -f http://localhost:5984/_up && echo "‚úÖ CouchDB health check OK"
            
            # Test authentication if configured
            if [ -n "$COUCHDB_USER" ] && [ -n "$COUCHDB_PASSWORD" ]; then
              curl -f -u "$COUCHDB_USER:$COUCHDB_PASSWORD" http://localhost:5984/_session && echo "‚úÖ Authentication OK"
            fi
            
            echo "‚úÖ Deployment successful - All health checks passed"
          else
            echo "‚ùå Deployment failed - CouchDB is not responding"
            echo "üìã Checking service status..."
            make status || echo "Failed to get status"
            echo "üìã Recent logs:"
            make logs || docker compose logs --tail=50
            
            echo "üîÑ Attempting to restart service..."
            make restart || echo "Failed to restart"
            sleep 10
            
            # Final attempt
            if curl -f http://localhost:5984 >/dev/null 2>&1; then
              echo "‚úÖ Recovery successful after restart"
            else
              echo "‚ùå Recovery failed - manual intervention required"
              exit 1
            fi
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy configuration scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload configuration scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'
        category: 'trivy-config'
        
    - name: Upload filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-fs' 